[env]
CUSTOM_QEMU_DIR='/home/js/Thesis/LibAFL/qemu-libafl-bridge'
CUSTOM_QEMU_NO_CONFIGURE = "ok"
PROFILE = { value = "release", condition = {env_not_set = ["PROFILE"]} }
PROFILE_DIR = {value = "release", condition = {env_not_set = ["PROFILE_DIR"] }}
CROSS_CC = "x86_64-linux-gnu-gcc"
CROSS_CXX = "x86_64-linux-gnu-g++"
CROSS_CFLAGS = ""
TARGET_DIR = "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}/x86_64"
LIBPNG_ARCH = "x86_64"
LIBPNG_OPTIMIZATIONS = "yes"
FEATURE = "x86_64"
#LIBAFL_DEBUG_OUTPUT = "1"
PROJECT_DIR = { script = ["pwd"] }
DEPS_DIR = "${PROJECT_DIR}/target/deps"

[tasks.target_dir]
condition = { files_not_exist = [ "${CARGO_MAKE_CRATE_TARGET_DIRECTORY}" ] }
script_runner="@shell"
script='''
mkdir ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}
'''

[tasks.arch_target_dir]
dependencies = ["target_dir"]
condition = { files_not_exist = [ "${TARGET_DIR}" ] }
script_runner="@shell"
script='''
mkdir ${TARGET_DIR}
'''

[tasks.build]
dependencies = ["arch_target_dir"]
command = "cargo"
args = [
    "build",
    "--profile",
    "${PROFILE}",
    "--features", "${FEATURE}",
    "--target-dir", "${TARGET_DIR}"
]

[tasks.fuzzer]
dependencies = ["build"]
script_runner="@shell"
script='''
rm -f ${TARGET_DIR}/${PROFILE_DIR}/qemu_launcher-${CARGO_MAKE_PROFILE}
mv ${TARGET_DIR}/${PROFILE_DIR}/qemu_launcher ${TARGET_DIR}/${PROFILE_DIR}/qemu_launcher-${CARGO_MAKE_PROFILE}
'''

[tasks.bzip2]
condition = { files_not_exist = [ "${DEPS_DIR}/bzip2-1.0.8" ] }
script_runner="@shell"
script='''
mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR} 
wget https://sourceware.org/pub/bzip2/bzip2-latest.tar.gz
tar -xvf bzip2-latest.tar.gz
rm bzip2-latest.tar.gz
'''

# Harness
[tasks.harness]
script_runner="@shell"
script='''
cd ${DEPS_DIR}/bzip2-1.0.8 && make install PREFIX=../
cd ${PROJECT_DIR}
gcc -L${DEPS_DIR}/include bzip2_harness.c -o ${TARGET_DIR}/bzip2-harness-${CARGO_MAKE_PROFILE} -lbz2
'''
dependencies = ["bzip2", "arch_target_dir"]

[tasks.debug]
command = "${TARGET_DIR}/${PROFILE_DIR}/qemu_launcher-${CARGO_MAKE_PROFILE}"
args = [
    "--input", "./corpus",
    "--output", "${TARGET_DIR}/output/",
    "--log", "${TARGET_DIR}/output/log.txt",
    "--cores", "0-7",
    "--asan-cores", "0-3",
    "--cmplog-cores", "2-5",
    "--iterations", "100000",
    "--verbose",
    "--",
    "${TARGET_DIR}/bzip2-harness-${CARGO_MAKE_PROFILE}",
]
dependencies = [ "harness", "fuzzer" ]

[tasks.run]
command = "${TARGET_DIR}/${PROFILE_DIR}/qemu_launcher-${CARGO_MAKE_PROFILE}"
args = [
    "--input", "./corpus",
    "--output", "${TARGET_DIR}/output/",
    "--log", "${TARGET_DIR}/output/log.txt",
    "--cores", "0-7",
    "--asan-cores", "0-3",
    "--cmplog-cores", "2-5",
    "--iterations", "1000000",
    "--tui",
    "--",
    "${TARGET_DIR}/bzip2-harness-${CARGO_MAKE_PROFILE}",
]

dependencies = [ "harness", "fuzzer" ]

[tasks.single]
command = "${TARGET_DIR}/${PROFILE_DIR}/qemu_launcher-${CARGO_MAKE_PROFILE}"
args = [
    "--input", "./corpus",
    "--output", "${TARGET_DIR}/output/",
    "--log", "${TARGET_DIR}/output/log.txt",
    "--cores", "0",
    "--",
    "${TARGET_DIR}/bzip2-harness-${CARGO_MAKE_PROFILE}",
]
dependencies = [ "harness", "fuzzer" ]

[tasks.test]
script_runner="@shell"
script='''
echo "Profile: ${PROFILE}"
cd injection_test || exit 1
make
mkdir in || true
echo aaaaaaaaaa > in/a
timeout 10s "$(find ${TARGET_DIR} -name 'qemu_launcher')" -o out -i in -j ../injections.toml -v -- ./static >/dev/null 2>fuzz.log || true
if [ -z "$(grep -Ei "found.*injection" fuzz.log)" ]; then
    echo "Fuzzer does not generate any testcases or any crashes"
    echo "Logs:"
    tail fuzz.log
    exit 1
else
    echo "Fuzzer is working"
fi
make clean
#rm -rf in out fuzz.log || true
'''
dependencies = ["build_unix"]

[tasks.clean]
linux_alias = "clean_unix"
mac_alias = "clean_unix"
windows_alias = "unsupported"

[tasks.clean_unix]
# Disable default `clean` definition
clear = true
script_runner="@shell"
script='''
rm -rf ${CARGO_MAKE_CRATE_TARGET_DIRECTORY}
cargo clean
'''